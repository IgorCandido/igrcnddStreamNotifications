{"version":3,"sources":["webpack:///nodecg-replicant-built.js","webpack:///webpack/bootstrap 4cdfe5b3a9499435335b","webpack:///./nodecg-replicant.js","webpack:///./~/clone/clone.js","webpack:///./~/buffer/index.js","webpack:///./~/base64-js/lib/b64.js","webpack:///./~/ieee754/index.js","webpack:///./~/buffer/~/isarray/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","clone","Polymer","is","properties","value","type","Object","observer","notify","hostAttributes","hidden","behaviors","NodeCGReplicantTargetingBehavior","_exposedValueChanged","newVal","this","_ignoreExposedValueObserver","replicant","_replicantChanged","oldVal","operations","clonedNewVal","fire","bubbles","Buffer","parent","circular","depth","prototype","_clone","child","proto","__isArray","__isRegExp","RegExp","source","__getRegExpFlags","lastIndex","__isDate","Date","getTime","useBuffer","isBuffer","length","copy","getPrototypeOf","create","index","allParents","indexOf","allChildren","push","i","attrs","getOwnPropertyDescriptor","set","filter","Infinity","__objToStr","o","toString","re","flags","global","ignoreCase","multiline","clonePrototype","typedArraySupport","Bar","arr","Uint8Array","foo","constructor","subarray","byteLength","e","kMaxLength","TYPED_ARRAY_SUPPORT","arg","undefined","fromNumber","fromString","arguments","fromObject","that","allocate","checked","string","encoding","write","object","fromBuffer","isArray","fromArray","TypeError","ArrayBuffer","buffer","fromTypedArray","fromArrayBuffer","fromArrayLike","fromJsonObject","array","_augment","data","__proto__","_isBuffer","fromPool","poolSize","rootParent","RangeError","SlowBuffer","subject","buf","len","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","binarySlice","base64Slice","utf16leSlice","hexWrite","offset","Number","remaining","strLen","Error","parsed","parseInt","substr","isNaN","utf8Write","blitBuffer","asciiWrite","asciiToBytes","binaryWrite","base64Write","ucs2Write","utf16leToBytes","base64","fromByteArray","slice","Math","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","String","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","j","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","replace","INVALID_BASE64_RE","trim","n","units","leadSurrogate","charCodeAt","byteArray","hi","lo","toByteArray","src","dst","INSPECT_MAX_BYTES","b","compare","a","x","y","isEncoding","concat","list","pos","item","equals","inspect","match","join","val","byteOffset","arrayIndexOf","foundIndex","get","console","log","readUInt8","v","writeUInt8","isFinite","swap","toJSON","Array","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt16LE","readUInt16BE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","read","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","target","targetStart","_set","fill","toArrayBuffer","BP","toLocaleString","lookup","decode","elt","code","PLUS","PLUS_URL_SAFE","SLASH","SLASH_URL_SAFE","NUMBER","UPPER","LOWER","b64ToByteArray","b64","L","l","tmp","placeHolders","charAt","Arr","uint8ToBase64","uint8","encode","num","tripletToBase64","temp","extraBytes","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","LN2"],"mappings":"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","file":"nodecg-replicant-built.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* eslint-env node */\n\t/* eslint-disable accessor-pairs */\n\t'use strict';\n\t\n\tconst clone = __webpack_require__(1);\n\t\n\tPolymer({\n\t\tis: 'nodecg-replicant',\n\t\n\t\tproperties: {\n\t\t\tvalue: {\n\t\t\t\ttype: Object,\n\t\t\t\tobserver: '_exposedValueChanged',\n\t\t\t\tnotify: true\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Fired when the value of the target replicant changes.\n\t\t * @event change\n\t\t */\n\t\n\t\thostAttributes: {\n\t\t\thidden: true\n\t\t},\n\t\n\t\tbehaviors: [\n\t\t\tPolymer.NodeCGReplicantTargetingBehavior\n\t\t],\n\t\n\t\t_exposedValueChanged: function (newVal) {\n\t\t\tif (!this._ignoreExposedValueObserver && this.replicant) {\n\t\t\t\tthis.replicant.value = newVal;\n\t\t\t\treturn this.replicant.value;\n\t\t\t}\n\t\t},\n\t\n\t\t_replicantChanged: function (newVal, oldVal, operations) {\n\t\t\tconst clonedNewVal = clone(newVal);\n\t\t\tthis._ignoreExposedValueObserver = true;\n\t\t\tthis.value = clonedNewVal;\n\t\t\tthis._ignoreExposedValueObserver = false;\n\t\t\tthis.fire('change', {\n\t\t\t\tnewVal: clonedNewVal,\n\t\t\t\toldVal: oldVal,\n\t\t\t\toperations: operations\n\t\t\t}, {bubbles: false});\n\t\t}\n\t});\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var clone = (function() {\n\t'use strict';\n\t\n\t/**\n\t * Clones (copies) an Object using deep copying.\n\t *\n\t * This function supports circular references by default, but if you are certain\n\t * there are no circular references in your object, you can save some CPU time\n\t * by calling clone(obj, false).\n\t *\n\t * Caution: if `circular` is false and `parent` contains circular references,\n\t * your program may enter an infinite loop and crash.\n\t *\n\t * @param `parent` - the object to be cloned\n\t * @param `circular` - set to true if the object to be cloned may contain\n\t *    circular references. (optional - true by default)\n\t * @param `depth` - set to a number if the object is only to be cloned to\n\t *    a particular depth. (optional - defaults to Infinity)\n\t * @param `prototype` - sets the prototype to be used when cloning an object.\n\t *    (optional - defaults to parent prototype).\n\t*/\n\tfunction clone(parent, circular, depth, prototype) {\n\t  var filter;\n\t  if (typeof circular === 'object') {\n\t    depth = circular.depth;\n\t    prototype = circular.prototype;\n\t    filter = circular.filter;\n\t    circular = circular.circular\n\t  }\n\t  // maintain two arrays for circular references, where corresponding parents\n\t  // and children have the same index\n\t  var allParents = [];\n\t  var allChildren = [];\n\t\n\t  var useBuffer = typeof Buffer != 'undefined';\n\t\n\t  if (typeof circular == 'undefined')\n\t    circular = true;\n\t\n\t  if (typeof depth == 'undefined')\n\t    depth = Infinity;\n\t\n\t  // recurse this function so we don't reset allParents and allChildren\n\t  function _clone(parent, depth) {\n\t    // cloning null always returns null\n\t    if (parent === null)\n\t      return null;\n\t\n\t    if (depth == 0)\n\t      return parent;\n\t\n\t    var child;\n\t    var proto;\n\t    if (typeof parent != 'object') {\n\t      return parent;\n\t    }\n\t\n\t    if (clone.__isArray(parent)) {\n\t      child = [];\n\t    } else if (clone.__isRegExp(parent)) {\n\t      child = new RegExp(parent.source, __getRegExpFlags(parent));\n\t      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n\t    } else if (clone.__isDate(parent)) {\n\t      child = new Date(parent.getTime());\n\t    } else if (useBuffer && Buffer.isBuffer(parent)) {\n\t      child = new Buffer(parent.length);\n\t      parent.copy(child);\n\t      return child;\n\t    } else {\n\t      if (typeof prototype == 'undefined') {\n\t        proto = Object.getPrototypeOf(parent);\n\t        child = Object.create(proto);\n\t      }\n\t      else {\n\t        child = Object.create(prototype);\n\t        proto = prototype;\n\t      }\n\t    }\n\t\n\t    if (circular) {\n\t      var index = allParents.indexOf(parent);\n\t\n\t      if (index != -1) {\n\t        return allChildren[index];\n\t      }\n\t      allParents.push(parent);\n\t      allChildren.push(child);\n\t    }\n\t\n\t    for (var i in parent) {\n\t      var attrs;\n\t      if (proto) {\n\t        attrs = Object.getOwnPropertyDescriptor(proto, i);\n\t      }\n\t\n\t      if (attrs && attrs.set == null) {\n\t        continue;\n\t      }\n\t      child[i] = _clone(parent[i], depth - 1);\n\t    }\n\t\n\t    return child;\n\t  }\n\t\n\t  return _clone(parent, depth);\n\t}\n\t\n\t/**\n\t * Simple flat clone using prototype, accepts only objects, usefull for property\n\t * override on FLAT configuration object (no nested props).\n\t *\n\t * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n\t * works.\n\t */\n\tclone.clonePrototype = function clonePrototype(parent) {\n\t  if (parent === null)\n\t    return null;\n\t\n\t  var c = function () {};\n\t  c.prototype = parent;\n\t  return new c();\n\t};\n\t\n\t// private utility functions\n\t\n\tfunction __objToStr(o) {\n\t  return Object.prototype.toString.call(o);\n\t};\n\tclone.__objToStr = __objToStr;\n\t\n\tfunction __isDate(o) {\n\t  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n\t};\n\tclone.__isDate = __isDate;\n\t\n\tfunction __isArray(o) {\n\t  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n\t};\n\tclone.__isArray = __isArray;\n\t\n\tfunction __isRegExp(o) {\n\t  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n\t};\n\tclone.__isRegExp = __isRegExp;\n\t\n\tfunction __getRegExpFlags(re) {\n\t  var flags = '';\n\t  if (re.global) flags += 'g';\n\t  if (re.ignoreCase) flags += 'i';\n\t  if (re.multiline) flags += 'm';\n\t  return flags;\n\t};\n\tclone.__getRegExpFlags = __getRegExpFlags;\n\t\n\treturn clone;\n\t})();\n\t\n\tif (typeof module === 'object' && module.exports) {\n\t  module.exports = clone;\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */\n\t/* eslint-disable no-proto */\n\t\n\t'use strict'\n\t\n\tvar base64 = __webpack_require__(3)\n\tvar ieee754 = __webpack_require__(4)\n\tvar isArray = __webpack_require__(5)\n\t\n\texports.Buffer = Buffer\n\texports.SlowBuffer = SlowBuffer\n\texports.INSPECT_MAX_BYTES = 50\n\tBuffer.poolSize = 8192 // not used by this implementation\n\t\n\tvar rootParent = {}\n\t\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n\t *     on objects.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\t\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n\t  ? global.TYPED_ARRAY_SUPPORT\n\t  : typedArraySupport()\n\t\n\tfunction typedArraySupport () {\n\t  function Bar () {}\n\t  try {\n\t    var arr = new Uint8Array(1)\n\t    arr.foo = function () { return 42 }\n\t    arr.constructor = Bar\n\t    return arr.foo() === 42 && // typed array instances can be augmented\n\t        arr.constructor === Bar && // constructor can be set\n\t        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n\t        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n\t  } catch (e) {\n\t    return false\n\t  }\n\t}\n\t\n\tfunction kMaxLength () {\n\t  return Buffer.TYPED_ARRAY_SUPPORT\n\t    ? 0x7fffffff\n\t    : 0x3fffffff\n\t}\n\t\n\t/**\n\t * Class: Buffer\n\t * =============\n\t *\n\t * The Buffer constructor returns instances of `Uint8Array` that are augmented\n\t * with function properties for all the node `Buffer` API functions. We use\n\t * `Uint8Array` so that square bracket notation works as expected -- it returns\n\t * a single octet.\n\t *\n\t * By augmenting the instances, we can avoid modifying the `Uint8Array`\n\t * prototype.\n\t */\n\tfunction Buffer (arg) {\n\t  if (!(this instanceof Buffer)) {\n\t    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n\t    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n\t    return new Buffer(arg)\n\t  }\n\t\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this.length = 0\n\t    this.parent = undefined\n\t  }\n\t\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    return fromNumber(this, arg)\n\t  }\n\t\n\t  // Slightly less common case.\n\t  if (typeof arg === 'string') {\n\t    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n\t  }\n\t\n\t  // Unusual.\n\t  return fromObject(this, arg)\n\t}\n\t\n\tfunction fromNumber (that, length) {\n\t  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    for (var i = 0; i < length; i++) {\n\t      that[i] = 0\n\t    }\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromString (that, string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\t\n\t  // Assumption: byteLength() return value is always < kMaxLength.\n\t  var length = byteLength(string, encoding) | 0\n\t  that = allocate(that, length)\n\t\n\t  that.write(string, encoding)\n\t  return that\n\t}\n\t\n\tfunction fromObject (that, object) {\n\t  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\t\n\t  if (isArray(object)) return fromArray(that, object)\n\t\n\t  if (object == null) {\n\t    throw new TypeError('must start with number, buffer, array or string')\n\t  }\n\t\n\t  if (typeof ArrayBuffer !== 'undefined') {\n\t    if (object.buffer instanceof ArrayBuffer) {\n\t      return fromTypedArray(that, object)\n\t    }\n\t    if (object instanceof ArrayBuffer) {\n\t      return fromArrayBuffer(that, object)\n\t    }\n\t  }\n\t\n\t  if (object.length) return fromArrayLike(that, object)\n\t\n\t  return fromJsonObject(that, object)\n\t}\n\t\n\tfunction fromBuffer (that, buffer) {\n\t  var length = checked(buffer.length) | 0\n\t  that = allocate(that, length)\n\t  buffer.copy(that, 0, 0, length)\n\t  return that\n\t}\n\t\n\tfunction fromArray (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\t// Duplicate of fromArray() to keep fromArray() monomorphic.\n\tfunction fromTypedArray (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  // Truncating the elements is probably not what people expect from typed\n\t  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n\t  // of the old Buffer constructor.\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayBuffer (that, array) {\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    array.byteLength\n\t    that = Buffer._augment(new Uint8Array(array))\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that = fromTypedArray(that, new Uint8Array(array))\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayLike (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\t// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n\t// Returns a zero-length buffer for inputs that don't conform to the spec.\n\tfunction fromJsonObject (that, object) {\n\t  var array\n\t  var length = 0\n\t\n\t  if (object.type === 'Buffer' && isArray(object.data)) {\n\t    array = object.data\n\t    length = checked(array.length) | 0\n\t  }\n\t  that = allocate(that, length)\n\t\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tif (Buffer.TYPED_ARRAY_SUPPORT) {\n\t  Buffer.prototype.__proto__ = Uint8Array.prototype\n\t  Buffer.__proto__ = Uint8Array\n\t} else {\n\t  // pre-set for values that may exist in the future\n\t  Buffer.prototype.length = undefined\n\t  Buffer.prototype.parent = undefined\n\t}\n\t\n\tfunction allocate (that, length) {\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = Buffer._augment(new Uint8Array(length))\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that.length = length\n\t    that._isBuffer = true\n\t  }\n\t\n\t  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n\t  if (fromPool) that.parent = rootParent\n\t\n\t  return that\n\t}\n\t\n\tfunction checked (length) {\n\t  // Note: cannot use `length < kMaxLength` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= kMaxLength()) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\t\n\tfunction SlowBuffer (subject, encoding) {\n\t  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\t\n\t  var buf = new Buffer(subject, encoding)\n\t  delete buf.parent\n\t  return buf\n\t}\n\t\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return !!(b != null && b._isBuffer)\n\t}\n\t\n\tBuffer.compare = function compare (a, b) {\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError('Arguments must be Buffers')\n\t  }\n\t\n\t  if (a === b) return 0\n\t\n\t  var x = a.length\n\t  var y = b.length\n\t\n\t  var i = 0\n\t  var len = Math.min(x, y)\n\t  while (i < len) {\n\t    if (a[i] !== b[i]) break\n\t\n\t    ++i\n\t  }\n\t\n\t  if (i !== len) {\n\t    x = a[i]\n\t    y = b[i]\n\t  }\n\t\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\t\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'raw':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t}\n\t\n\tBuffer.concat = function concat (list, length) {\n\t  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\t\n\t  if (list.length === 0) {\n\t    return new Buffer(0)\n\t  }\n\t\n\t  var i\n\t  if (length === undefined) {\n\t    length = 0\n\t    for (i = 0; i < list.length; i++) {\n\t      length += list[i].length\n\t    }\n\t  }\n\t\n\t  var buf = new Buffer(length)\n\t  var pos = 0\n\t  for (i = 0; i < list.length; i++) {\n\t    var item = list[i]\n\t    item.copy(buf, pos)\n\t    pos += item.length\n\t  }\n\t  return buf\n\t}\n\t\n\tfunction byteLength (string, encoding) {\n\t  if (typeof string !== 'string') string = '' + string\n\t\n\t  var len = string.length\n\t  if (len === 0) return 0\n\t\n\t  // Use a for loop to avoid recursion\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'binary':\n\t      // Deprecated\n\t      case 'raw':\n\t      case 'raws':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength\n\t\n\tfunction slowToString (encoding, start, end) {\n\t  var loweredCase = false\n\t\n\t  start = start | 0\n\t  end = end === undefined || end === Infinity ? this.length : end | 0\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t  if (start < 0) start = 0\n\t  if (end > this.length) end = this.length\n\t  if (end <= start) return ''\n\t\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\t\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\t\n\t      case 'binary':\n\t        return binarySlice(this, start, end)\n\t\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toString = function toString () {\n\t  var length = this.length | 0\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t}\n\t\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t}\n\t\n\tBuffer.prototype.inspect = function inspect () {\n\t  var str = ''\n\t  var max = exports.INSPECT_MAX_BYTES\n\t  if (this.length > 0) {\n\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t    if (this.length > max) str += ' ... '\n\t  }\n\t  return '<Buffer ' + str + '>'\n\t}\n\t\n\tBuffer.prototype.compare = function compare (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return 0\n\t  return Buffer.compare(this, b)\n\t}\n\t\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n\t  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n\t  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n\t  byteOffset >>= 0\n\t\n\t  if (this.length === 0) return -1\n\t  if (byteOffset >= this.length) return -1\n\t\n\t  // Negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\t\n\t  if (typeof val === 'string') {\n\t    if (val.length === 0) return -1 // special case: looking for empty string always fails\n\t    return String.prototype.indexOf.call(this, val, byteOffset)\n\t  }\n\t  if (Buffer.isBuffer(val)) {\n\t    return arrayIndexOf(this, val, byteOffset)\n\t  }\n\t  if (typeof val === 'number') {\n\t    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n\t      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n\t    }\n\t    return arrayIndexOf(this, [ val ], byteOffset)\n\t  }\n\t\n\t  function arrayIndexOf (arr, val, byteOffset) {\n\t    var foundIndex = -1\n\t    for (var i = 0; byteOffset + i < arr.length; i++) {\n\t      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n\t        if (foundIndex === -1) foundIndex = i\n\t        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n\t      } else {\n\t        foundIndex = -1\n\t      }\n\t    }\n\t    return -1\n\t  }\n\t\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\t\n\t// `get` is deprecated\n\tBuffer.prototype.get = function get (offset) {\n\t  console.log('.get() is deprecated. Access using array indexes instead.')\n\t  return this.readUInt8(offset)\n\t}\n\t\n\t// `set` is deprecated\n\tBuffer.prototype.set = function set (v, offset) {\n\t  console.log('.set() is deprecated. Access using array indexes instead.')\n\t  return this.writeUInt8(v, offset)\n\t}\n\t\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0\n\t  var remaining = buf.length - offset\n\t  if (!length) {\n\t    length = remaining\n\t  } else {\n\t    length = Number(length)\n\t    if (length > remaining) {\n\t      length = remaining\n\t    }\n\t  }\n\t\n\t  // must be an even number of digits\n\t  var strLen = string.length\n\t  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\t\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2\n\t  }\n\t  for (var i = 0; i < length; i++) {\n\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t    if (isNaN(parsed)) throw new Error('Invalid hex string')\n\t    buf[offset + i] = parsed\n\t  }\n\t  return i\n\t}\n\t\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction binaryWrite (buf, string, offset, length) {\n\t  return asciiWrite(buf, string, offset, length)\n\t}\n\t\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8'\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset | 0\n\t    if (isFinite(length)) {\n\t      length = length | 0\n\t      if (encoding === undefined) encoding = 'utf8'\n\t    } else {\n\t      encoding = length\n\t      length = undefined\n\t    }\n\t  // legacy write(string, encoding, offset, length) - remove in v0.13\n\t  } else {\n\t    var swap = encoding\n\t    encoding = offset\n\t    offset = length | 0\n\t    length = swap\n\t  }\n\t\n\t  var remaining = this.length - offset\n\t  if (length === undefined || length > remaining) length = remaining\n\t\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('attempt to write outside buffer bounds')\n\t  }\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\t\n\t      case 'ascii':\n\t        return asciiWrite(this, string, offset, length)\n\t\n\t      case 'binary':\n\t        return binaryWrite(this, string, offset, length)\n\t\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t}\n\t\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\t\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end)\n\t  var res = []\n\t\n\t  var i = start\n\t  while (i < end) {\n\t    var firstByte = buf[i]\n\t    var codePoint = null\n\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t      : (firstByte > 0xDF) ? 3\n\t      : (firstByte > 0xBF) ? 2\n\t      : 1\n\t\n\t    if (i + bytesPerSequence <= end) {\n\t      var secondByte, thirdByte, fourthByte, tempCodePoint\n\t\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1]\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          fourthByte = buf[i + 3]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t      }\n\t    }\n\t\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD\n\t      bytesPerSequence = 1\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n\t      codePoint = 0xDC00 | codePoint & 0x3FF\n\t    }\n\t\n\t    res.push(codePoint)\n\t    i += bytesPerSequence\n\t  }\n\t\n\t  return decodeCodePointsArray(res)\n\t}\n\t\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tvar MAX_ARGUMENTS_LENGTH = 0x1000\n\t\n\tfunction decodeCodePointsArray (codePoints) {\n\t  var len = codePoints.length\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\t\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  var res = ''\n\t  var i = 0\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    )\n\t  }\n\t  return res\n\t}\n\t\n\tfunction asciiSlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction binarySlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    ret += String.fromCharCode(buf[i])\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction hexSlice (buf, start, end) {\n\t  var len = buf.length\n\t\n\t  if (!start || start < 0) start = 0\n\t  if (!end || end < 0 || end > len) end = len\n\t\n\t  var out = ''\n\t  for (var i = start; i < end; i++) {\n\t    out += toHex(buf[i])\n\t  }\n\t  return out\n\t}\n\t\n\tfunction utf16leSlice (buf, start, end) {\n\t  var bytes = buf.slice(start, end)\n\t  var res = ''\n\t  for (var i = 0; i < bytes.length; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n\t  }\n\t  return res\n\t}\n\t\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  var len = this.length\n\t  start = ~~start\n\t  end = end === undefined ? len : ~~end\n\t\n\t  if (start < 0) {\n\t    start += len\n\t    if (start < 0) start = 0\n\t  } else if (start > len) {\n\t    start = len\n\t  }\n\t\n\t  if (end < 0) {\n\t    end += len\n\t    if (end < 0) end = 0\n\t  } else if (end > len) {\n\t    end = len\n\t  }\n\t\n\t  if (end < start) end = start\n\t\n\t  var newBuf\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    newBuf = Buffer._augment(this.subarray(start, end))\n\t  } else {\n\t    var sliceLen = end - start\n\t    newBuf = new Buffer(sliceLen, undefined)\n\t    for (var i = 0; i < sliceLen; i++) {\n\t      newBuf[i] = this[i + start]\n\t    }\n\t  }\n\t\n\t  if (newBuf.length) newBuf.parent = this.parent || this\n\t\n\t  return newBuf\n\t}\n\t\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\t\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length)\n\t  }\n\t\n\t  var val = this[offset + --byteLength]\n\t  var mul = 1\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  return this[offset]\n\t}\n\t\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return this[offset] | (this[offset + 1] << 8)\n\t}\n\t\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return (this[offset] << 8) | this[offset + 1]\n\t}\n\t\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t}\n\t\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var i = byteLength\n\t  var mul = 1\n\t  var val = this[offset + --i]\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t}\n\t\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset] | (this[offset + 1] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset + 1] | (this[offset] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t}\n\t\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, true, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, false, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, true, 52, 8)\n\t}\n\t\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, false, 52, 8)\n\t}\n\t\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('value is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('index out of range')\n\t}\n\t\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\t\n\t  var mul = 1\n\t  var i = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n\t    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n\t      (littleEndian ? i : 1 - i) * 8\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n\t    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset + 3] = (value >>> 24)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = 0\n\t  var mul = 1\n\t  var sub = value < 0 ? 1 : 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  var sub = value < 0 ? 1 : 0\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  if (value < 0) value = 0xff + value + 1\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 3] = (value >>> 24)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (value > max || value < min) throw new RangeError('value is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('index out of range')\n\t  if (offset < 0) throw new RangeError('index out of range')\n\t}\n\t\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t}\n\t\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t  return offset + 8\n\t}\n\t\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t}\n\t\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!start) start = 0\n\t  if (!end && end !== 0) end = this.length\n\t  if (targetStart >= target.length) targetStart = target.length\n\t  if (!targetStart) targetStart = 0\n\t  if (end > 0 && end < start) end = start\n\t\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\t\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\t\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start\n\t  }\n\t\n\t  var len = end - start\n\t  var i\n\t\n\t  if (this === target && start < targetStart && targetStart < end) {\n\t    // descending copy from end\n\t    for (i = len - 1; i >= 0; i--) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // ascending copy from start\n\t    for (i = 0; i < len; i++) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else {\n\t    target._set(this.subarray(start, start + len), targetStart)\n\t  }\n\t\n\t  return len\n\t}\n\t\n\t// fill(value, start=0, end=buffer.length)\n\tBuffer.prototype.fill = function fill (value, start, end) {\n\t  if (!value) value = 0\n\t  if (!start) start = 0\n\t  if (!end) end = this.length\n\t\n\t  if (end < start) throw new RangeError('end < start')\n\t\n\t  // Fill 0 bytes; we're done\n\t  if (end === start) return\n\t  if (this.length === 0) return\n\t\n\t  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n\t  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\t\n\t  var i\n\t  if (typeof value === 'number') {\n\t    for (i = start; i < end; i++) {\n\t      this[i] = value\n\t    }\n\t  } else {\n\t    var bytes = utf8ToBytes(value.toString())\n\t    var len = bytes.length\n\t    for (i = start; i < end; i++) {\n\t      this[i] = bytes[i % len]\n\t    }\n\t  }\n\t\n\t  return this\n\t}\n\t\n\t/**\n\t * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n\t * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n\t */\n\tBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n\t  if (typeof Uint8Array !== 'undefined') {\n\t    if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t      return (new Buffer(this)).buffer\n\t    } else {\n\t      var buf = new Uint8Array(this.length)\n\t      for (var i = 0, len = buf.length; i < len; i += 1) {\n\t        buf[i] = this[i]\n\t      }\n\t      return buf.buffer\n\t    }\n\t  } else {\n\t    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n\t  }\n\t}\n\t\n\t// HELPER FUNCTIONS\n\t// ================\n\t\n\tvar BP = Buffer.prototype\n\t\n\t/**\n\t * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n\t */\n\tBuffer._augment = function _augment (arr) {\n\t  arr.constructor = Buffer\n\t  arr._isBuffer = true\n\t\n\t  // save reference to original Uint8Array set method before overwriting\n\t  arr._set = arr.set\n\t\n\t  // deprecated\n\t  arr.get = BP.get\n\t  arr.set = BP.set\n\t\n\t  arr.write = BP.write\n\t  arr.toString = BP.toString\n\t  arr.toLocaleString = BP.toString\n\t  arr.toJSON = BP.toJSON\n\t  arr.equals = BP.equals\n\t  arr.compare = BP.compare\n\t  arr.indexOf = BP.indexOf\n\t  arr.copy = BP.copy\n\t  arr.slice = BP.slice\n\t  arr.readUIntLE = BP.readUIntLE\n\t  arr.readUIntBE = BP.readUIntBE\n\t  arr.readUInt8 = BP.readUInt8\n\t  arr.readUInt16LE = BP.readUInt16LE\n\t  arr.readUInt16BE = BP.readUInt16BE\n\t  arr.readUInt32LE = BP.readUInt32LE\n\t  arr.readUInt32BE = BP.readUInt32BE\n\t  arr.readIntLE = BP.readIntLE\n\t  arr.readIntBE = BP.readIntBE\n\t  arr.readInt8 = BP.readInt8\n\t  arr.readInt16LE = BP.readInt16LE\n\t  arr.readInt16BE = BP.readInt16BE\n\t  arr.readInt32LE = BP.readInt32LE\n\t  arr.readInt32BE = BP.readInt32BE\n\t  arr.readFloatLE = BP.readFloatLE\n\t  arr.readFloatBE = BP.readFloatBE\n\t  arr.readDoubleLE = BP.readDoubleLE\n\t  arr.readDoubleBE = BP.readDoubleBE\n\t  arr.writeUInt8 = BP.writeUInt8\n\t  arr.writeUIntLE = BP.writeUIntLE\n\t  arr.writeUIntBE = BP.writeUIntBE\n\t  arr.writeUInt16LE = BP.writeUInt16LE\n\t  arr.writeUInt16BE = BP.writeUInt16BE\n\t  arr.writeUInt32LE = BP.writeUInt32LE\n\t  arr.writeUInt32BE = BP.writeUInt32BE\n\t  arr.writeIntLE = BP.writeIntLE\n\t  arr.writeIntBE = BP.writeIntBE\n\t  arr.writeInt8 = BP.writeInt8\n\t  arr.writeInt16LE = BP.writeInt16LE\n\t  arr.writeInt16BE = BP.writeInt16BE\n\t  arr.writeInt32LE = BP.writeInt32LE\n\t  arr.writeInt32BE = BP.writeInt32BE\n\t  arr.writeFloatLE = BP.writeFloatLE\n\t  arr.writeFloatBE = BP.writeFloatBE\n\t  arr.writeDoubleLE = BP.writeDoubleLE\n\t  arr.writeDoubleBE = BP.writeDoubleBE\n\t  arr.fill = BP.fill\n\t  arr.inspect = BP.inspect\n\t  arr.toArrayBuffer = BP.toArrayBuffer\n\t\n\t  return arr\n\t}\n\t\n\tvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\t\n\tfunction base64clean (str) {\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '='\n\t  }\n\t  return str\n\t}\n\t\n\tfunction stringtrim (str) {\n\t  if (str.trim) return str.trim()\n\t  return str.replace(/^\\s+|\\s+$/g, '')\n\t}\n\t\n\tfunction toHex (n) {\n\t  if (n < 16) return '0' + n.toString(16)\n\t  return n.toString(16)\n\t}\n\t\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity\n\t  var codePoint\n\t  var length = string.length\n\t  var leadSurrogate = null\n\t  var bytes = []\n\t\n\t  for (var i = 0; i < length; i++) {\n\t    codePoint = string.charCodeAt(i)\n\t\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        }\n\t\n\t        // valid lead\n\t        leadSurrogate = codePoint\n\t\n\t        continue\n\t      }\n\t\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t        leadSurrogate = codePoint\n\t        continue\n\t      }\n\t\n\t      // valid surrogate pair\n\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t    }\n\t\n\t    leadSurrogate = null\n\t\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint)\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\t\n\t  return bytes\n\t}\n\t\n\tfunction asciiToBytes (str) {\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; i++) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t  }\n\t  return byteArray\n\t}\n\t\n\tfunction utf16leToBytes (str, units) {\n\t  var c, hi, lo\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; i++) {\n\t    if ((units -= 2) < 0) break\n\t\n\t    c = str.charCodeAt(i)\n\t    hi = c >> 8\n\t    lo = c % 256\n\t    byteArray.push(lo)\n\t    byteArray.push(hi)\n\t  }\n\t\n\t  return byteArray\n\t}\n\t\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\t\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  for (var i = 0; i < length; i++) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i]\n\t  }\n\t  return i\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer, (function() { return this; }())))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\n\t;(function (exports) {\n\t\t'use strict';\n\t\n\t  var Arr = (typeof Uint8Array !== 'undefined')\n\t    ? Uint8Array\n\t    : Array\n\t\n\t\tvar PLUS   = '+'.charCodeAt(0)\n\t\tvar SLASH  = '/'.charCodeAt(0)\n\t\tvar NUMBER = '0'.charCodeAt(0)\n\t\tvar LOWER  = 'a'.charCodeAt(0)\n\t\tvar UPPER  = 'A'.charCodeAt(0)\n\t\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\t\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\t\n\t\tfunction decode (elt) {\n\t\t\tvar code = elt.charCodeAt(0)\n\t\t\tif (code === PLUS ||\n\t\t\t    code === PLUS_URL_SAFE)\n\t\t\t\treturn 62 // '+'\n\t\t\tif (code === SLASH ||\n\t\t\t    code === SLASH_URL_SAFE)\n\t\t\t\treturn 63 // '/'\n\t\t\tif (code < NUMBER)\n\t\t\t\treturn -1 //no match\n\t\t\tif (code < NUMBER + 10)\n\t\t\t\treturn code - NUMBER + 26 + 26\n\t\t\tif (code < UPPER + 26)\n\t\t\t\treturn code - UPPER\n\t\t\tif (code < LOWER + 26)\n\t\t\t\treturn code - LOWER + 26\n\t\t}\n\t\n\t\tfunction b64ToByteArray (b64) {\n\t\t\tvar i, j, l, tmp, placeHolders, arr\n\t\n\t\t\tif (b64.length % 4 > 0) {\n\t\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t\t}\n\t\n\t\t\t// the number of equal signs (place holders)\n\t\t\t// if there are two placeholders, than the two characters before it\n\t\t\t// represent one byte\n\t\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t\t// this is just a cheap hack to not do indexOf twice\n\t\t\tvar len = b64.length\n\t\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\t\n\t\t\t// base64 is 4/3 + up to two characters of the original data\n\t\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\t\n\t\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\t\n\t\t\tvar L = 0\n\t\n\t\t\tfunction push (v) {\n\t\t\t\tarr[L++] = v\n\t\t\t}\n\t\n\t\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t}\n\t\n\t\t\tif (placeHolders === 2) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t} else if (placeHolders === 1) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t}\n\t\n\t\t\treturn arr\n\t\t}\n\t\n\t\tfunction uint8ToBase64 (uint8) {\n\t\t\tvar i,\n\t\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\t\toutput = \"\",\n\t\t\t\ttemp, length\n\t\n\t\t\tfunction encode (num) {\n\t\t\t\treturn lookup.charAt(num)\n\t\t\t}\n\t\n\t\t\tfunction tripletToBase64 (num) {\n\t\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t\t}\n\t\n\t\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\t\toutput += tripletToBase64(temp)\n\t\t\t}\n\t\n\t\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\t\tswitch (extraBytes) {\n\t\t\t\tcase 1:\n\t\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\t\toutput += '=='\n\t\t\t\t\tbreak\n\t\t\t\tcase 2:\n\t\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\t\toutput += '='\n\t\t\t\t\tbreak\n\t\t\t}\n\t\n\t\t\treturn output\n\t\t}\n\t\n\t\texports.toByteArray = b64ToByteArray\n\t\texports.fromByteArray = uint8ToBase64\n\t}( false ? (this.base64js = {}) : exports))\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\texports.read = function (buffer, offset, isLE, mLen, nBytes) {\n\t  var e, m\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var nBits = -7\n\t  var i = isLE ? (nBytes - 1) : 0\n\t  var d = isLE ? -1 : 1\n\t  var s = buffer[offset + i]\n\t\n\t  i += d\n\t\n\t  e = s & ((1 << (-nBits)) - 1)\n\t  s >>= (-nBits)\n\t  nBits += eLen\n\t  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  m = e & ((1 << (-nBits)) - 1)\n\t  e >>= (-nBits)\n\t  nBits += mLen\n\t  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  if (e === 0) {\n\t    e = 1 - eBias\n\t  } else if (e === eMax) {\n\t    return m ? NaN : ((s ? -1 : 1) * Infinity)\n\t  } else {\n\t    m = m + Math.pow(2, mLen)\n\t    e = e - eBias\n\t  }\n\t  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n\t}\n\t\n\texports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n\t  var e, m, c\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n\t  var i = isLE ? 0 : (nBytes - 1)\n\t  var d = isLE ? 1 : -1\n\t  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\t\n\t  value = Math.abs(value)\n\t\n\t  if (isNaN(value) || value === Infinity) {\n\t    m = isNaN(value) ? 1 : 0\n\t    e = eMax\n\t  } else {\n\t    e = Math.floor(Math.log(value) / Math.LN2)\n\t    if (value * (c = Math.pow(2, -e)) < 1) {\n\t      e--\n\t      c *= 2\n\t    }\n\t    if (e + eBias >= 1) {\n\t      value += rt / c\n\t    } else {\n\t      value += rt * Math.pow(2, 1 - eBias)\n\t    }\n\t    if (value * c >= 2) {\n\t      e++\n\t      c /= 2\n\t    }\n\t\n\t    if (e + eBias >= eMax) {\n\t      m = 0\n\t      e = eMax\n\t    } else if (e + eBias >= 1) {\n\t      m = (value * c - 1) * Math.pow(2, mLen)\n\t      e = e + eBias\n\t    } else {\n\t      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n\t      e = 0\n\t    }\n\t  }\n\t\n\t  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\t\n\t  e = (e << mLen) | m\n\t  eLen += mLen\n\t  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\t\n\t  buffer[offset + i - d] |= s * 128\n\t}\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tvar toString = {}.toString;\n\t\n\tmodule.exports = Array.isArray || function (arr) {\n\t  return toString.call(arr) == '[object Array]';\n\t};\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** nodecg-replicant-built.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4cdfe5b3a9499435335b\n **/","/* eslint-env node */\n/* eslint-disable accessor-pairs */\n'use strict';\n\nconst clone = require('clone');\n\nPolymer({\n\tis: 'nodecg-replicant',\n\n\tproperties: {\n\t\tvalue: {\n\t\t\ttype: Object,\n\t\t\tobserver: '_exposedValueChanged',\n\t\t\tnotify: true\n\t\t}\n\t},\n\n\t/**\n\t * Fired when the value of the target replicant changes.\n\t * @event change\n\t */\n\n\thostAttributes: {\n\t\thidden: true\n\t},\n\n\tbehaviors: [\n\t\tPolymer.NodeCGReplicantTargetingBehavior\n\t],\n\n\t_exposedValueChanged: function (newVal) {\n\t\tif (!this._ignoreExposedValueObserver && this.replicant) {\n\t\t\tthis.replicant.value = newVal;\n\t\t\treturn this.replicant.value;\n\t\t}\n\t},\n\n\t_replicantChanged: function (newVal, oldVal, operations) {\n\t\tconst clonedNewVal = clone(newVal);\n\t\tthis._ignoreExposedValueObserver = true;\n\t\tthis.value = clonedNewVal;\n\t\tthis._ignoreExposedValueObserver = false;\n\t\tthis.fire('change', {\n\t\t\tnewVal: clonedNewVal,\n\t\t\toldVal: oldVal,\n\t\t\toperations: operations\n\t\t}, {bubbles: false});\n\t}\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./nodecg-replicant.js\n ** module id = 0\n ** module chunks = 0\n **/","var clone = (function() {\n'use strict';\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n*/\nfunction clone(parent, circular, depth, prototype) {\n  var filter;\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    filter = circular.filter;\n    circular = circular.circular\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth == 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      child = new Buffer(parent.length);\n      parent.copy(child);\n      return child;\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n};\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n};\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n};\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n};\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n};\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/clone/clone.js\n ** module id = 1\n ** module chunks = 0\n **/","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n *     on objects.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\nfunction typedArraySupport () {\n  function Bar () {}\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    arr.constructor = Bar\n    return arr.foo() === 42 && // typed array instances can be augmented\n        arr.constructor === Bar && // constructor can be set\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    this.length = 0\n    this.parent = undefined\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    array.byteLength\n    that = Buffer._augment(new Uint8Array(array))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n} else {\n  // pre-set for values that may exist in the future\n  Buffer.prototype.length = undefined\n  Buffer.prototype.parent = undefined\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = Buffer._augment(new Uint8Array(length))\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n    that._isBuffer = true\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\n// `get` is deprecated\nBuffer.prototype.get = function get (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` is deprecated\nBuffer.prototype.set = function set (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), targetStart)\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function _augment (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array set method before overwriting\n  arr._set = arr.set\n\n  // deprecated\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.indexOf = BP.indexOf\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUIntLE = BP.readUIntLE\n  arr.readUIntBE = BP.readUIntBE\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readIntLE = BP.readIntLE\n  arr.readIntBE = BP.readIntBE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUIntLE = BP.writeUIntLE\n  arr.writeUIntBE = BP.writeUIntBE\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeIntLE = BP.writeIntLE\n  arr.writeIntBE = BP.writeIntBE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/buffer/index.js\n ** module id = 2\n ** module chunks = 0\n **/","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/base64-js/lib/b64.js\n ** module id = 3\n ** module chunks = 0\n **/","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ieee754/index.js\n ** module id = 4\n ** module chunks = 0\n **/","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/buffer/~/isarray/index.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}